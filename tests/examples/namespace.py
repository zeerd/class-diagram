from examples.utils import *

def case_namespace():
    data = read_json('namespace.cpp.json')
    expect_true(data['ExNS::ExNSClz']['isReduced'])
    expect_true(data['ExNsClass']['fields'][0]['types'][0]['isReduced'])
    expect_false(data['NsClass']['isInner'])
    expect_false(data['abc::Ns']['isInner'])
    expect_true(data['abc::Ns::Inner']['isInner'])
    expect_false(data['abc::NsEnum']['isInner'])
    expect_false(data['def::NsTypeDefSt']['isInner'])
    expect_true(data['abc::Ns::InSt']['isInner'])
    expect_eq(data['abc::Ns::InSt']['kind'] , 'struct')
    expect_eq(data['NsInnerClass']['fields'][0]['types'][0]['type'] , 'abc::Ns::Inner')
    expect_eq(data['NsInnerStruct']['fields'][0]['types'][0]['type'] , 'abc::Ns::InSt')
    expect_eq(data['NsInnerTypedef']['fields'][0]['types'][0]['type'] , 'def::NsTypeDefSt')
    expect_false(data['NsInnerTypedef']['fields'][0]['types'][0]['isReduced'])
    expect_true(any((field['name'] == 'i' and field['types'][0]['type'] == 'abc::Ns::Inner' for field in data['abc::Ns']['fields'])))
    expect_eq(data['Outer']['fields'][0]['types'][0]['type'] , 'Outer::In')
    expect_eq(data['Outer2']['fields'][0]['types'][0]['type'] , 'Outer2::In2')
    expect_eq(data['StOuter']['fields'][0]['types'][0]['type'] , 'StOuter::StIn')
    expect_true(data['StInClass::InClassSt']['isInner'])
    expect_eq(data['StInClass::InClassSt']['kind'] , 'struct')
    expect_eq(data['StInClass']['fields'][0]['types'][0]['type'] , 'StInClass::InClassSt')
    expect_eq(data['a::b::c']['namespace'] , 'a::b')
    expect_eq(data['abc::Ns::InSt']['namespace'], 'abc')
    expect_eq(data['abc::NsEnum']['namespace'], 'abc')
    expect_eq(data['def::NsTypeDefSt']['namespace'] , 'def')
    expect_eq(data['NsEnumClass']['fields'][0]['types'][0]['namespace'] , 'abc')
